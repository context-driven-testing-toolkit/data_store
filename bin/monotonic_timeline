#!/usr/bin/env bash

set -o errexit -o nounset -o pipefail

# Generate a monotonic timeline.
#
#     monotonic_timeline <from date> <until date> <increment size>
#
# The result lines look as follows (pseudocode). Both payloads of
# interval.epoch can hydrate a DATETIME object.
#
#     .interval.epoch: { "interval": { "epoch": INT, "string": STRING }, "events" : [] },
#
# The stringified date in STRING is UTC and ISO-8601 formatted.
#
# The lines returned are JSON blobs like this:
#
#     { meta: {
#         history: { start: DATETIME, end: DATETIME }, increment: STRING },
#         timeline: []
#     }
#
# Where .timeline contains the lines of the timeline descending order.

if [ -z "${3-}" ]
then
  echo "Usage: $(basename "${0-}") <from date> <until date> <increment size>"
  exit 1
fi

origin=$(date --utc --iso-8601=s -d "${1}")

terminus=$(date --utc --iso-8601=s -d "${2}")

monotonic_increment="${3}"

dateseq --compute-from-last "$origin" "$monotonic_increment" "$terminus" \
        -f '{"%s": {"interval": {"epoch": %s, "string": "%FT%T%Z"}}, "events": []}' \
        | jq -ec .
